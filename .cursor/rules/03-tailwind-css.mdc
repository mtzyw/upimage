- Embrace the utility-first approach. Apply utilities directly in your JSX.
- Use `@apply` sparingly - only for very common, repeated utility combinations that form a component-like abstraction.
- Use the project's predefined design system:
    - Reference `tailwind.config.ts` for custom colors, spacing, fonts, etc.
    - Use the shadcn/ui component library patterns for consistent UI.
    - Prefer theme values over arbitrary values. If arbitrary values are used often for a specific purpose, consider adding it to the theme.
- Class Organization:
    - Group related utilities logically (layout, typography, colors, etc.).
    - Consider using Prettier with Tailwind plugin for consistent formatting.
    - For very long lists of utility classes, consider formatting them for better readability.
- Responsive Design:
    - Use mobile-first approach with responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`, `2xl:`).
    - Test across different viewport sizes during development.
- State Variants:
    - Properly use state variants (`hover:`, `focus:`, `active:`, `disabled:`, etc.).
    - For complex interactive states, prefer `group` and `group-*` classes.
- Dark Mode:
    - Use `dark:` variant with the project's dark mode configuration.
    - Ensure sufficient contrast in both light and dark modes.
- Use Tailwind CSS with JavaScript conditionals where needed:
    - `className={condition ? 'bg-blue-500' : 'bg-red-500'}`
    - Consider libraries like `clsx` or `tailwind-merge` for complex conditionals.
- Performance:
    - Be aware of CSS bloat. Use PurgeCSS in production (enabled by default).
    - Avoid unnecessarily long chains of arbitrary values.
- Customization:
    - Refer to `tailwind.config.ts` for theme customizations (colors, spacing, fonts, etc.) and plugins.
    - When adding custom CSS, consider if it can be achieved with Tailwind utilities or by extending the theme in `tailwind.config.ts` first.
- Readability: For very long lists of utility classes, consider formatting them (e.g., line breaks before responsive prefixes or related groups) if it improves readability without cluttering.
- Avoid arbitrary values unless necessary. Prefer theme values. If arbitrary values are used often for a specific purpose, consider adding it to the theme.
- Group related utilities if it makes sense (e.g., all flexbox utilities together, then padding, then margin). 